#version 430 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

uniform layout (location = 0) vec3 resolution;

layout(rgba32f, binding = 2) uniform image3D img_output;

float remap(float v, float l0, float h0, float ln, float hn) {
  return ln + ((v - l0) * (hn - ln))/(h0 - l0);
}

vec3 random3( vec3 p ) {
  return fract(sin(vec3(dot(p,vec3(127.1,311.7, 253.74)),dot(p,vec3(93.98, 269.5,183.3)), dot(p, vec3(203.68, 285.88, 126.49))))*43758.5453);
}



// Kudos to The Book of Shaders
float worley(int cells, vec3 uvw, int level) {
  uvw *= cells;

  // Tile the space
  vec3 i_st = floor(uvw);
  vec3 f_st = fract(uvw);

  float m_dist = 1.0;

  for (int z= -1; z <= 1; z++) {
    for (int y= -1; y <= 1; y++) {
      for (int x= -1; x <= 1; x++) {

        // Neighbor place in the grid
        vec3 neighbor = vec3(float(x),float(y), float(z));

        // Random position from current + neighbor place in the grid
        // Mod to make it tileable
        vec3 pos = mod(i_st + neighbor, cells);

        vec3 point = random3(pos);

        // Vector between the pixel and the point
        vec3 diff = neighbor + point - f_st;

        // Distance to the point
        float dist = length(diff);

        // Keep the closer distance
        m_dist = min(m_dist, dist);
      }
    }
  }

  // Invert the noise
  m_dist = 1. - m_dist;

  return m_dist;
}


void main() {
  vec3 texel = gl_GlobalInvocationID.xyz;
  vec3 uvw = texel/resolution.xyz;
  vec4 color = vec4(0.);

  color.r = worley(3, uvw, 1);
  color.g = worley(6, uvw, 1);
  color.b = worley(9, uvw, 1);
  
  imageStore(img_output, ivec3(texel), color);
}
