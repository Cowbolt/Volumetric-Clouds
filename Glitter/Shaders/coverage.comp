#version 430 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D img_output;

//	Classic Perlin 2D Noise 
//	by Stefan Gustavson
//
vec2 fade(vec2 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}
vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}

float cnoise(vec2 P){
  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);
  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);
  Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation
  vec4 ix = Pi.xzxz;
  vec4 iy = Pi.yyww;
  vec4 fx = Pf.xzxz;
  vec4 fy = Pf.yyww;
  vec4 i = permute(permute(ix) + iy);
  vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...
  vec4 gy = abs(gx) - 0.5;
  vec4 tx = floor(gx + 0.5);
  gx = gx - tx;
  vec2 g00 = vec2(gx.x,gy.x);
  vec2 g10 = vec2(gx.y,gy.y);
  vec2 g01 = vec2(gx.z,gy.z);
  vec2 g11 = vec2(gx.w,gy.w);
  vec4 norm = 1.79284291400159 - 0.85373472095314 * 
    vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));
  g00 *= norm.x;
  g01 *= norm.y;
  g10 *= norm.z;
  g11 *= norm.w;
  float n00 = dot(g00, vec2(fx.x, fy.x));
  float n10 = dot(g10, vec2(fx.y, fy.y));
  float n01 = dot(g01, vec2(fx.z, fy.z));
  float n11 = dot(g11, vec2(fx.w, fy.w));
  vec2 fade_xy = fade(Pf.xy);
  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);
  return 2.3 * n_xy;
}

float circle(vec2 point, vec2 center, float radius) {
  if ((length(point - center) - radius) < 0.0)
    return 1.0;
  return 0.0;
}

float remap(float v, float l0, float h0, float ln, float hn) {
  return ln + ((v - l0) * (hn - ln))/(h0 - l0);
}

void main() {
  vec2 pixel_coord = gl_GlobalInvocationID.xy;
  
  // vec4 rgba = vec4(1.0, 0.2, 0.0, 1.0);
  // imageStore(img_output, ivec2(pixel_coord), rgba);
  float one = max(0, cnoise(pixel_coord/32)*0.600);
  float two = max(0, cnoise(pixel_coord/8.)*0.5);
  float three = max(0, cnoise(pixel_coord/4.)*0.25);
  float four = max(0, cnoise(pixel_coord)*0.125);
  float simplex1 = clamp(one+two+three+four, 0.0, 1.0);
  float n = simplex1;
  // if (n > 0.95) n = 0.0;
  // else n = remap(n, 0.0, 0.95, 0.0, 1.0);

  imageStore(img_output, ivec2(pixel_coord), vec4(vec3(n), 1.0));
  // imageStore(img_output, ivec2(pixel_coord), vec4(vec3(circle(pixel_coord, vec2(63,63), 30.)), 1.0));
}
