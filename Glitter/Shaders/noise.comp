#version 430 core

// Max global work groups : 65535
// Max local work groups : 1792
// Max local work group invocations : 1792

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

uniform layout (location = 0) vec3 resolution;

layout(rgba32f, binding = 1) uniform image3D img_output;


// NOISE START

// Simplex noise stolen from https://github.com/ashima/webgl-noise
vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
  return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v)
{ 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

  // First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

  // Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

  // Permutations
  i = mod289(i); 
  vec4 p = permute( permute( permute( 
          i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
        + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
      + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

  // Gradients: 7x7 points over a square, mapped onto an octahedron.
  // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

  //Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

  // Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
        dot(p2,x2), dot(p3,x3) ) );
}

// NOISE END

float remap(float v, float l0, float h0, float ln, float hn) {
  return ln + ((v - l0) * (hn - ln))/(h0 - l0);
}


vec3 random3( vec3 p ) {
  return fract(sin(vec3(dot(p,vec3(127.1,311.7, 253.74)),dot(p,vec3(93.98, 269.5,183.3)), dot(p, vec3(203.68, 285.88, 126.49))))*43758.5453);
}


// Kudos to The Book of Shaders
float worley(int cells, vec3 uvw) {
  uvw *= cells;

  // Tile the space
  vec3 i_st = floor(uvw);
  vec3 f_st = fract(uvw);

  float m_dist = 1.0;

  for (int z= -1; z <= 1; z++) {
    for (int y= -1; y <= 1; y++) {
      for (int x= -1; x <= 1; x++) {

        // Neighbor place in the grid
        vec3 neighbor = vec3(float(x),float(y), float(z));

        // Random position from current + neighbor place in the grid
        // Mod to make it tileable
        vec3 pos = mod(i_st + neighbor, cells);

        vec3 point = random3(pos);

        // Vector between the pixel and the point
        vec3 diff = neighbor + point - f_st;

        // Distance to the point
        float dist = length(diff);

        // Keep the closer distance
        m_dist = min(m_dist, dist);
      }
    }
  }

  // Invert the noise
  m_dist = 1. - m_dist;

  return max(0.0, m_dist);
}

void main() {
  vec3 texel = gl_GlobalInvocationID.xyz;
  vec3 uvw = texel/resolution.xyz;


  // Invert the noise
  float m_dist = worley(9, uvw);
  float m_dist1 = worley(27, uvw);


  vec4 color = vec4(0.);


  // Generate simplex noise
  float w1 = 4/14.;
  float w2 = 2/14.;
  float w3 = 1/14.;
  float w4 = 1/56.;
  float w5 = 1/56.;

  vec3 seed = random3(vec3(4.11));
  float a1 =  w1 * max(0, snoise(uvw + 100*seed));
  float a2 =  w2 * max(0, snoise(uvw * 3 + 200*seed));
  float a3 =  w3 * max(0, snoise(uvw * 5 + 300*seed));
  float a4 =  w4 * max(0, snoise(uvw * 16 + 400*seed));
  float a5 =  w5 * max(0, snoise(uvw * 64 + 500*seed));
  float a = a1 + a2 + a3 + a4 + a5;

  seed = random3(vec3(1.4));
  float b1 =  w1 * max(0, snoise(uvw + 100*seed));
  float b2 =  w2 * max(0, snoise(uvw * 3 + 200*seed));
  float b3 =  w3 * max(0, snoise(uvw * 5 + 300*seed));
  float b4 =  w4 * max(0, snoise(uvw * 16 + 400*seed));
  float b5 =  w5 * max(0, snoise(uvw * 64 + 500*seed));
  float b = b1 + b2 + b3 + b4 + b5;

  // seed = random3(vec3(8.2));
  // float c1 =  w1 * max(0, snoise(uvw + 100*seed));
  // float c2 =  w2 * max(0, snoise(uvw * 3 + 200*seed));
  // float c3 =  w3 * max(0, snoise(uvw * 5 + 300*seed));
  // float c4 =  w4 * max(0, snoise(uvw * 16 + 400*seed));
  // float c5 =  w5 * max(0, snoise(uvw * 64 + 500*seed));
  // float c = c1 + c2 + c3 + c4 + c5;

  float simplex = a + b;
  simplex = clamp(simplex, 0.0, 1.0);
  simplex = remap(simplex, 0.0, 1.0, 0.2, 1.0);

  
  color.r = simplex;
  // color.r = remap(simplex, -(m_dist+m_dist1)*0.5, 1.0, 0.0 ,1.0);

  color.g = 0.625 * worley(6, uvw) +
            0.250 * worley(12, uvw) +
            0.125 * worley(18, uvw) +
            0.0625 * worley(24, uvw);

  color.b = 0.625 * worley(9, uvw) +
            0.250 * worley(18, uvw) +
            0.125 * worley(27, uvw) +
            0.0625 * worley(36, uvw);

  color.a = 0.625 * worley(18, uvw) +
            0.250 * worley(36, uvw) +
            0.125 * worley(54, uvw) + 
            0.0625 * worley(72, uvw);

  imageStore(img_output, ivec3(texel), color);
}
