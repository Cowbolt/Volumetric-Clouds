#version 430 core

// Max global work groups : 65535
// Max local work groups : 1792
// Max local work group invocations : 1792

// Crashes for high values (9999). System limit?
#define MAX_POINTS 1024

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;


// Total points for each level of worley fidelity
uniform layout (location = 0) int low_detail;
uniform layout (location = 1) int med_detail;
uniform layout (location = 2) int high_detail;

uniform vec3[MAX_POINTS] low_detail_points;
uniform vec3[MAX_POINTS] med_detail_points;
uniform vec3[MAX_POINTS] high_detail_points;

layout(rgba32f, binding = 1) uniform image3D img_output;


// NOISE START

// Simplex noise stolen from https://github.com/ashima/webgl-noise
vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 permute(vec4 x) {
     return mod289(((x*34.0)+1.0)*x);
}

vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v)
  { 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289(i); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
}

// NOISE END

float remap(float v, float l0, float h0, float ln, float hn) {
  return ln + ((v - l0) * (hn - ln))/(h0 - l0);
}


void main() {
  vec3 texel_coord = gl_GlobalInvocationID.xyz;
  
  float low_dist = 9999.;
  for (int i = 0; i < MAX_POINTS; i++)
  {
    if (i == low_detail) break;
    low_dist = min(low_dist, distance(texel_coord, low_detail_points[i]));
  }

  float med_dist = 9999.;
  for (int i = 0; i < MAX_POINTS; i++)
  {
    if (i == med_detail) break;
    med_dist = min(med_dist, distance(texel_coord, med_detail_points[i]));
  }

  float high_dist = 9999.;
  for (int i = 0; i < MAX_POINTS; i++)
  {
    if (i == high_detail) break;
    high_dist = min(high_dist, distance(texel_coord, high_detail_points[i]));
  }

  // Magic numbers ahoy
  float low_worley = clamp(1-low_dist/20, 0.0, 1.0);
  float med_worley = clamp(1-med_dist*(med_detail/7500.), 0.0, 1.0);
  float high_worley = clamp(1-high_dist*(high_detail/7500.), 0.0, 1.0);

  // low_worley = max(0, -0.2 + low_worley/1.2 + snoise(texel_coord/8)/16);
  // med_worley += med_worley*snoise(texel_coord/6)/16;
  // high_worley += high_worley*snoise(texel_coord/2)/8;

  float worley = 0.7 * low_worley +
                 0.5 * med_worley +
                 0.4 * high_worley;
  // float low_worley = max(0, -0.2+(1-low_dist/20.)/1.2 + snoise(texel_coord/8)/16.);
  // float color = max(0, 1-dist/20.);
  //
  // float color = med_worley + snoise(texel_coord/6)/16;

  // vec4 rgba = vec4(vec3(low_worley, med_worley, high_worley), 1.);
  //
  float zero = max(0, snoise(vec3(100)+texel_coord/32)*0.600);
  float one = max(0, snoise(texel_coord/32)*0.600);
  float two = max(0, snoise(texel_coord/8.)*0.5);
  float three = max(0, snoise(texel_coord/4.)*0.25);
  float four = max(0, snoise(texel_coord)*0.125);
  float simplex1 = clamp(one+two+three+four, 0.0, 1.0);

  zero = max(0, snoise(vec3(200*low_detail_points[0])+texel_coord/32)*0.600);
  one = max(0, snoise(vec3(10000.*low_detail_points[0]) + texel_coord/32)*0.600);
  two = max(0, snoise(vec3(10000.*low_detail_points[0]) + texel_coord/8.)*0.5);
  three = max(0, snoise(vec3(10000.*low_detail_points[0]) + texel_coord/4.)*0.25);
  four = max(0, snoise(vec3(10000.*low_detail_points[0]) + texel_coord)*0.125);
  float simplex2 = clamp(one+two+three+four, 0.0, 1.0);

  float simplex_worley = remap(0.5*(simplex1 + simplex2),
      -1.0 - low_worley, 1.0, 0.0, 1.0);

  float coverage = max(0, snoise(texel_coord));

  // float simplex_worley = remap(simplex, 1.0 - low_worley, 1.0, 0.0, 1.0);
  vec4 rgba = vec4(simplex_worley, 1.0, 1.0, 1.0);

  // imageStore(img_output, pixel_coords, vec4(1.));
  // FIXME: Find some way of mapping output values to [0,1] range
  imageStore(img_output, ivec3(texel_coord), rgba);
}
